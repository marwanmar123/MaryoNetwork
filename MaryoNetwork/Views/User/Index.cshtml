@model IEnumerable<MaryoNetwork.Models.User>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@{
    ViewData["Title"] = "Index";
}
@{
    string fullName = null;
    string id = null;
    byte[] image = null;
    bool isOnline = false;
    if (SignInManager.IsSignedIn(User))
    {
        User user = await UserManager.FindByEmailAsync(User.Identity.Name);
        if (user != null)
        {
            fullName = user.FullName;
            id = user.Id;
            image = user.ProfilePicture;
            isOnline = user.IsOnline;
        }


    }
}
<form asp-controller="User" asp-action="Index">
    <input type="text" name="search" />
    <button class="btn btn-primary" id="searchBtn">search</button>
    <a class="btn btn-primary" id="searchBtn" asp-action="Index">*</a>
</form>

<div class="d-flex">
    <div>
        @foreach (var item in Model)
        {
        <div class="pt-5 d-flex">
            <a class="d-flex" asp-action="Profile" asp-route-id="@item.Id">
                <div class="p-1">
                    @if (item.ProfilePicture != null)
                    {
                        if (isOnline == true)
                        {
                            <img class="profile-actif" src="data:image/*;base64,@Convert.ToBase64String(item.ProfilePicture)">
                        }
                        else
                        {
                            <img class="rounded-circle" style="width: 40px; height: 40px;" src="data:image/*;base64,@Convert.ToBase64String(item.ProfilePicture)">

                        }
                    }
                    else
                    {
                        if (isOnline == true)
                        {
                            <p class="profile-actif">@item.FullName.Substring(0, 2).ToUpper()</p>

                        }
                        else
                        {
                            <p>@item.FullName.Substring(0, 2).ToUpper()</p>
                        }

                    }
                </div>
                <p class="p-1">
                    @Html.DisplayFor(modelItem => item.FullName)
                </p>
            </a>
        </div>
        }
    </div>
    <div>
    <h3>Friends</h3>
    @foreach (var item in Model)
    {
        <div class="d-flex flex-row justify-content-between">
            <div>
                @if (item.FriendRequestSent != null)
                {
                    @foreach (var friendSenders in item.FriendRequestSent)
                    {
                        <p>@friendSenders.Sender.FullName</p>
                    }
                }

            </div>
            <div>
                @if (item.FriendRequestReceived != null)
                {
                    @foreach (var friendreceived in item.FriendRequestReceived)
                    {
                        <p>@friendreceived.Receiver.FullName</p>
                    }
                }

            </div>
        </div>
    }
    </div>
</div>